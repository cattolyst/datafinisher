[Settings]

# where to look for rule definitions
# DECISION: keep default ruledefs in project root, or hide it in sql subdirectory?
ruledefs = ruledefs.csv
 
# Thoughts on naming stuff...
# For table creation, either standardize on a cr_ prefix for the variable or
# Have a separate section specifically for table creation
# For SQL that returns results, do sel_ or separate section
# For SQL that updates, do up_ or separate section

# TODO: document someplace (maybe at creation) exact reasons for each 
# of the following 10 tables' existance:
# cdid
# ruledefs
# dflog
# dfvars
# fulloutput
# fulloutput2
# data_dictionary
# scaffold
# obs_df
# dd2
# ...then rename them so they all have a df_ prefix and have short
# but descriptive names

create_scaffold = 
    create table if not exists scaffold as
    select distinct patient_num, {0} start_date
    from observation_fact order by patient_num, start_date;
       
obs_df =
  create table if not exists obs_df as
  select distinct id,patient_num pn,{0} sd
  ,case when cpath like '\i2b2\%' then concept_cd else cpath end concept_cd
  ,instance_num,modifier_cd
  ,case when valtype_cd in ('@','N','') then null else valtype_cd end valtype_cd
  ,case when tval_char in ('@','E','') then null else tval_char end tval_char
  ,nval_num
  ,case when valueflag_cd in ('@','') then null else valueflag_cd end valueflag_cd
  ,quantity_num,units_cd,location_cd,confidence_num
  from observation_fact ob join cdid on ccd = concept_cd
  where modifier_cd not in ('Labs|Aggregate:Last','Labs|Aggregate:Median','PROCORDERS:Outpatient','DiagObs:PROBLEM_LIST')
  and concept_cd not like 'DEM|AGEATV:%' 
  and concept_cd not like 'DEM|SEX:%' 
  and concept_cd not like 'DEM|VITAL:%'
  order by id,pn,sd,concept_cd,instance_num,modifier_cd
  
dd2 =
  create table if not exists dd2 as
  select *,bscode||presuffix jcode,bscode||presuffix||suffix ccode
  ,colid||presuffix||suffix colname,9999 chunk,'t9999' ttable
  from(
  select distinct cid,colcd bscode,colid,name colname_long
  ,sub_slct_std,sub_payload,sub_frm_std
  ,coalesce(sbwr,'') sbwr,sub_grp_std
  ,coalesce('_'||replace(cpath,'-','_'),'') presuffix,coalesce(suffix,'') suffix
  ,cpath concept_cd,ruledefs.rule,grouping,subgrouping,in_use
  from ruledefs join data_dictionary on ruledefs.rule = data_dictionary.rule
  join cdid on id = cid 
  where concode = 1 and in_use = 1
  union all
  select distinct cid,colcd bscode,colid,name colname_long
  ,sub_slct_std,sub_payload,sub_frm_std
  ,coalesce(sbwr,'') sbwr,sub_grp_std
  ,coalesce(presuffix,'') presuffix,coalesce(suffix,'') suffix
  ,NULL concept_cd,ruledefs.rule,grouping,subgrouping,in_use
  from ruledefs join data_dictionary on ruledefs.rule = data_dictionary.rule
  where concode = 0 and in_use = 1
  ) order by cid,jcode,grouping,subgrouping

chunkdd2 = update dd2 set chunk = {0},ttable = 't'||substr('000'||{0},-3) where jcode in (select * from (select distinct jcode from dd2) limit {1} offset {0})

# in the below, "^(.*):.*$" puts the string we use as the data domain, i.e. everything 
# before the first ':', into the first matched group, which is what the grs custom function
# returns
cdid_tab_tmp =
  create table if not exists cdid_tmp as
  select distinct concept_cd ccd,id
  ,grs("^(.*):.*$",concept_cd) ddomain
  ,cd.concept_path cpath
  from concept_dimension cd 
  join (select min(id) id,min(concept_path) concept_path 
  from variable 
  where name not like '%old at visit' and name not in ('Living','Deceased','Not recorded','Female','Male','Unknown')
  group by item_key) vr
  on cd.concept_path like vr.concept_path||'%'


cdid_tab =
  create table if not exists cdid as
  select distinct * from cdid_tmp

maketables =
  select 'create table if not exists '||ttable||' as select patient_num pn,start_date sd,'||group_concat(sel)||' from scaffold '||group_concat(qry,' ')
  from(
  select sub_slct_std||' '||group_concat(replace(sub_payload,'{ccode}',ccode))||
  ' '||replace(sub_frm_std,'{cid}',cid)||
  ' '||replace(sbwr,'{concept_cd}',coalesce(''''||concept_cd||'''',''))||' '||replace(sub_grp_std,'{jcode}',jcode) qry
  ,group_concat(ccode||' '||colname) sel
  ,cid,jcode,ttable from dd2
  group by jcode,cid,ttable
  order by cid
  ) group by ttable
  
fulloutput2 =
  select 'create table if not exists fulloutput2 as select scaffold.*,'||group_concat(sel)||
  ' from scaffold '||group_concat(qry,' ') 
  from (
  select group_concat(colname) sel,' left join '||ttable||' on '||
  ttable||'.pn = patient_num and '||ttable||'.sd=start_date' qry 
  from dd2 group by ttable)


#concept code map not included because each line has a separate SQL statement
#do not want to create variables if code is not more than 1 line

# below settings are not currently linked into df.py but are still valid settings for
# queries that are still needed

obs_labs_v = 
  create view obs_labs as
  select distinct patient_num pn,"""+rdst(dtcp)+""" sd,id,cpath,avg(nval_num) nval_num
  ,group_concat(distinct units_cd) units
  ,case when coalesce(group_concat(distinct tval_char),'E')='E' then '' else group_concat(distinct tval_char) end ||
  case when coalesce(group_concat(distinct valueflag_cd),'@')='@' then '' else ' flag:'||
  group_concat(distinct valueflag_cd) end || case when count(*) > 1 then ' cnt:'||count(*) else '' end info
  from observation_fact join cdid on concept_cd = ccd
  where modifier_cd = '@' and ddomain = 'LOINC' or ddomain like '%COMPONENT_ID'
  group by patient_num,"""+rdst(dtcp)+""",cpath,id

dd_criteria = 
  select distinct "update data_dictionary set rule = '"||rule||"' where "||criterion||" and rule = 'UNKNOWN_DATA_ELEMENT'" 
  from ruledefs where in_use=1 and criterion is not NULL and criterion != ''


# dd_diag = 
#   update data_dictionary set rule = 'diag' where ddomain like '%ICD9%DX_ID%' or ddomain like '%DX_ID%ICD9%'
#   and rule = 'UNKNOWN_DATA_ELEMENT'
# 	
# dd_loinc = 
#   update data_dictionary set rule = 'loinc' where ddomain like '%LOINC%COMPONENT_ID%' 
#   or ddomain like '%COMPONENT_ID%LOINC%'
#   and rule = 'UNKNOWN_DATA_ELEMENT'
# 
# dd_code_only = 
#   update data_dictionary set rule = 'code' where
#   coalesce(mod,tval_char,valueflag_cd,units_cd,confidence_num,quantity_num,location_cd,valtype_cd,nval_num,-1) = -1
#   and rule = 'UNKNOWN_DATA_ELEMENT'
# 
# dd_codemod_only = 
#   update data_dictionary set rule = 'codemod' where
#   coalesce(tval_char,valueflag_cd,units_cd,confidence_num,quantity_num,location_cd,valtype_cd,nval_num,-1) = -1
#   and mod is not null and rule = 'UNKNOWN_DATA_ELEMENT'
#   
# dd_vvitals =
#   update data_dictionary set rule = 'vitals' where 
#   ddomain like '%PAT_ENC:%' and ddomain not like '%PAT_ENC::LMP%'
#   and rule = 'UNKNOWN_DATA_ELEMENT'
# 
# dd_vvital = 
#   update data_dictionary set rule = 'vitals' where ddomain like '%PAT_ENC%' 
#   and ddomain not like '%PAT_ENC:LMP%'
#   and rule = 'UNKNOWN_DATA_ELEMENT'

# the colname not like '%_info' might not be a great idea, doing this for demo purposes
dd2selbin = 
  select group_concat(cn) from (
    select 'case when '||colname||' is NULL then ''F'' else ''T'' end '||colname cn,jcode,grouping,subgrouping from dd2 where rule in ('diag','code','codemod') and colname not like '%_info'
    union all
    select colname cn,jcode,grouping,subgrouping 
    from dd2 where rule not in ('diag','code','codemod') and colname not like '%_info'
    order by jcode,grouping,subgrouping)

# TODO: below here, uncertain what the code is used for, document and rename

codef_sel = "select group_concat(colid) from data_dictionary where rule = 'code'"
codef_jrep = 
  select ' left join (select patient_num,start_date sd
  ,replace(group_concat(distinct concept_cd),'','',''; '') '||colid||' from cdid 
  join obs_noins on ccd = concept_cd where id = '||cid||' group by patient_num
  ,start_date order by patient_num,start_date) '||colid||' 
  on '||colid||'.patient_num = scaffold.patient_num 
  and '||colid||'.sd = scaffold.start_date' from data_dictionary where rule = 'code'


#kept dynamic SQL for ONEPERDAY because first part is more complicated

loinc_sel = 
      select replace(group_concat(distinct colid||'_'||cpath||
      '_value,'||colid||'_'||cpath||'_units,'||colid||'_'||cpath||'_info'),'-','_')
      from obs_labs join data_dictionary on cid = id
      where rule = 'loinc' order by cid

loinc_jrep = 
  select distinct
    replace('left join (select distinct pn,sd,cpath,nval_num '||colid||'_'||cpath||'_value'||
    ',units '||colid||'_'||cpath||'_units'||
    ',info '||colid||'_'||cpath||'_info'||
    ' from obs_labs where id='||cid||
    ' and cpath='''||cpath||''') '||colid||'_'||cpath||
    ' on '||colid||'_'||cpath||'.pn = scaffold.patient_num and '||
    colid||'_'||cpath||'.sd = scaffold.start_date','-','_')
    from obs_labs join data_dictionary on cid = id
    where rule = 'loinc' order by cid

